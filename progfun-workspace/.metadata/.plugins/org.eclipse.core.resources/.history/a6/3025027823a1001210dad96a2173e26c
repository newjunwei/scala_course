package recfun
import common._
import scala.collection.immutable.Stack
import sun.security.util.Length


object Main {
  def main(args: Array[String]) {
    println("Pascal's Triangle")
    for (row <- 0 to 10) {
      for (col <- 0 to row)
        print(pascal(col, row) + " ")
      println()
    }
  }

  /**
   * Exercise 1
   */
  def pascal(c: Int, r: Int): Int = {
    if (r == 0) 1
    else if (c == 0 || c == r) 1
    else pascal(c - 1, r - 1) + pascal(c, r - 1)
  }

  /**
   * Exercise 2
   */
  def balance(chars: List[Char]): Boolean = {
    
/*    def foreach(chars: List[Char], ch: Char):Int = {      
      val range = 0 to chars.length-1 by 1      
      for (i <- range) {        
          if (ch.equals(chars(i))) 
            return i          
      }
      return -1
    }
*/
    def dropedList(list: => List[Char]): List[Char] =
      list.drop(1)
    
    var i = 0;
    def loop(chars: List[Char]): Char = {      
      if (chars.isEmpty) return 't'
      if (chars(0).equals('(')) {
        i += 1        
        loop(dropedList(chars))
      } else if (chars(0).equals(')')) {
        if (i == 0)
          ')'
        else {
          i -= 1;
          loop(dropedList(chars))
        }
      } else {
        loop(dropedList(chars))
      }

    }       
    
    (loop(chars) == 't' && i == 0)    
  }

  /**
   * Exercise 3
   */
  def countChange(money: Int, coins: List[Int]): Int = {
    /*
    if (money == 0) return 0
    if (coins == null || coins.isEmpty) 0;

    def check(money: Int, count: Int): Int = {
      var dcount = count;
      for (i <- 0 to coins.length - 1 by 1) {
        var dis = money - coins(i);
        if (dis > 0) dcount = check(dis, dcount);
        else if (dis == 0) dcount += 1
        else dis = money
      }
      return dcount;
    }

    return check(money, 0);
    * 
    * 
    */
    
    def change(sum:Int, coins:List[Int], j:Int):Int = {
    		    if (money == 0) 1
    else if (money < 0 || coins.isEmpty) 0
    else countChange(money-coins.head, coins.tail) + countChange(money-coins, coins.tail)
    } 
		
	
  
  
}
